name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_DEFAULT_TIMEOUT: 100

jobs:
  # Fast linting and code quality checks
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Cache pre-commit hooks
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[dev,test]

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  # Unit tests (matrix for multiple Python versions)
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: test-deps-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            test-deps-${{ runner.os }}-${{ matrix.python-version }}-
            test-deps-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[test]

      - name: Run unit tests
        run: pytest tests/ -v --cov=wolt_api_mcp --cov-report=xml --cov-report=term-missing -m "not integration"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Test package installation
        run: |
          python -c "from wolt_api_mcp import search_restaurants, mcp; print('MCP server imports successfully')"
          python -c "from wolt_api_mcp import WoltAPI, Restaurant, WoltAPIError; print('Core API imports work')"

  # Integration tests (rate-limited, single Python version)
  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Cache integration test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: integration-deps-${{ runner.os }}-3.11-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            integration-deps-${{ runner.os }}-3.11-
            integration-deps-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[test]

      - name: Run integration tests (rate-limited)
        run: |
          # Note: Integration tests are rate-limited to avoid overwhelming Wolt's APIs
          # We run a subset of tests to verify basic functionality with real endpoints
          pytest tests/ -v --tb=short -m "integration and not slow" || true

      - name: Run slow integration tests
        run: |
          pytest tests/ -v --tb=short -m "integration and slow" || true

  # Build and package verification
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache build dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            build/
            dist/
          key: build-deps-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            build-deps-${{ runner.os }}-

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Security and dependency checks
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache security tools
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: security-tools-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            security-tools-${{ runner.os }}-

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install -e .[security]

      - name: Run bandit security check
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Run safety check
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 7

  # Documentation validation
  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate README
        run: |
          # Check that README.md exists and has basic content
          test -f README.md
          grep -q "Wolt Restaurant Availability MCP" README.md
          grep -q "Installation" README.md
          grep -q "Usage" README.md
          grep -q "MCP Client Configuration" README.md

      - name: Validate package structure
        run: |
          # Verify modern Python package structure
          test -f pyproject.toml
          test -f src/wolt_api_mcp/__init__.py
          test -f src/wolt_api_mcp/server.py
          test -d tests/
          test -f LICENSE
          test -f docs/examples.md

      - name: Check for broken links in docs
        run: |
          # Basic check for common broken link patterns
          grep -r "TODO\|FIXME\|XXX" docs/ || true
          grep -r "http://localhost" docs/ && exit 1 || true

  # MCP server functionality test
  mcp-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[test]

      - name: Test MCP server startup
        run: |
          # Test that the MCP server can start without errors
          timeout 10s python -m wolt_api_mcp.server --help || true
          
      - name: Test tool imports
        run: |
          python -c "
          from wolt_api_mcp.server import mcp, search_restaurants, check_restaurant_availability, get_nearby_restaurants
          print('‚úÖ All MCP tools imported successfully')
          print(f'üìä Server has {len(mcp.tools)} tools registered')
          for tool_name in mcp.tools:
              print(f'  - {tool_name}')
          "

  # Final status check
  all-checks:
    runs-on: ubuntu-latest
    needs: [lint, test, integration, build, security, docs, mcp-test]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.integration.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.docs.result }}" == "success" && \
                "${{ needs.mcp-test.result }}" == "success" ]]; then
            echo "‚úÖ All checks passed!"
            exit 0
          else
            echo "‚ùå Some checks failed!"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Integration: ${{ needs.integration.result }}"
            echo "Build: ${{ needs.build.result }}"
            echo "Security: ${{ needs.security.result }}"
            echo "Docs: ${{ needs.docs.result }}"
            echo "MCP Test: ${{ needs.mcp-test.result }}"
            exit 1
          fi